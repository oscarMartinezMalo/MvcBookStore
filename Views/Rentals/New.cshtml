
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2 class="title">Rent Books to Customer</h2>

<form id="newRental" action="" class="form-card">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-containe">
            <input id="customer" name="customer" placeholder="Search an existing Customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Add Book</label>
        <div class="tt-containe">
            <input id="book" name="book"  placeholder="Search an existing Book" data-rule-validBook="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div  class="row books-container">
        <div>
            <ul id="books" class="list-group"></ul>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>


@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            let vm = {
                booksIds: []
            };

            // Typeahead Customer
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 1,
                highlight: true
            }, {
                name: 'customers',
                display: 'name',
                source: customers
            }).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
            });
            ////

            // Typeahead book
            var books = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/books?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#book').typeahead({
                minLength: 1,
                highlight: true
            }, {
                name: 'books',
                display: 'name',
                source: books
            }).on("typeahead:select", function (e, book) {
                bookIndex = vm.booksIds.push(book.id);
                console.log(vm.booksIds);

                $("#books").append(`<li class="list-group-item"> ${book.name} 
                                    <span class="glyphicon glyphicon-trash js-trash"  book-id='${bookIndex}'></span> 
                                    </li>`)
                $("#book").typeahead("val", ""); // Empty the input

            });
            ////

            // Delete the dynamic elements added
            $(document).on('click', ".js-trash", (function (e) {
                let row = $(e.currentTarget);
                let bookId = parseInt( row.attr("book-id")) -1;
                vm.booksIds.splice(bookId, 1);

                row.parents("li").remove();
            }));


            // Custome Validator for Input Customer
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid customer.");
            ////

            // Custome Validator for Input book
            $.validator.addMethod("validBook", function () {
                return vm.booksIds.length > 0;
            }, "Please select at least one Book");
            ////

            // Validate form and then Submmit
            let validator = $("#newRental").validate({
                submitHandler: function () {
                    // Submit the Form

                        $.ajax({
                            url: "../api/newRentals",
                            method: "post",
                            data: vm,
                        })
                        .done(() => {
                            toastr.success("Books successfully Rented");
                            $("#customer").typeahead("val", ""); // Empty the input
                            $("#book").typeahead("val", ""); // Empty the input
                            $("#books").empty(); // Empty the List of books
                            vm = { booksIds: [] };
                            validator.resetForm(); // Reset the form in term of validation
                        })
                        .fail(() => {
                            toastr.success("Something unexpected happened");
                        })

                        return false; // To prevent the default summit form
                    //});
                    ////
                }
            });
            ////
        })
    </script>
}

